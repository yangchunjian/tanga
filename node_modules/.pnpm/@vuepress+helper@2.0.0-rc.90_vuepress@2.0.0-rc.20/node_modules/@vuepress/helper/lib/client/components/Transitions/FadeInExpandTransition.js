import { Transition, TransitionGroup, defineComponent, h } from 'vue';
export const FadeInExpandTransition = defineComponent({
    name: 'FadeInExpandTransition',
    props: {
        /* Whether to group transitions */
        group: Boolean,
        appear: Boolean,
        /* Whether to switch to the transition of `width` */
        width: Boolean,
        mode: String,
        onLeave: Function,
        onAfterLeave: Function,
        onAfterEnter: Function,
    },
    setup(props, { slots }) {
        const handleBeforeLeave = (el) => {
            if (props.width) {
                el.style.maxWidth = `${el.offsetWidth}px`;
            }
            else {
                el.style.maxHeight = `${el.offsetHeight}px`;
            }
            void el.offsetWidth;
        };
        const handleLeave = (el) => {
            if (props.width) {
                el.style.maxWidth = '0';
            }
            else {
                el.style.maxHeight = '0';
            }
            void el.offsetWidth;
            props.onLeave?.();
        };
        const handleAfterLeave = (el) => {
            if (props.width) {
                el.style.maxWidth = '';
            }
            else {
                el.style.maxHeight = '';
            }
            props.onAfterLeave?.();
        };
        const handleEnter = (el) => {
            el.style.transition = 'none';
            if (props.width) {
                const memorizedWidth = el.offsetWidth;
                el.style.maxWidth = '0';
                void el.offsetWidth;
                el.style.transition = '';
                el.style.maxWidth = `${memorizedWidth}px`;
            }
            else {
                const memorizedHeight = el.offsetHeight;
                el.style.maxHeight = '0';
                void el.offsetWidth;
                el.style.transition = '';
                el.style.maxHeight = `${memorizedHeight}px`;
            }
            void el.offsetWidth;
        };
        const handleAfterEnter = (el) => {
            if (props.width) {
                el.style.maxWidth = '';
            }
            else {
                el.style.maxHeight = '';
            }
            props.onAfterEnter?.();
        };
        return () => h((props.group ? TransitionGroup : Transition), {
            name: props.width ? 'fade-in-width-expand' : 'fade-in-height-expand',
            appear: props.appear,
            mode: props.mode,
            onEnter: handleEnter,
            onAfterEnter: handleAfterEnter,
            onBeforeLeave: handleBeforeLeave,
            onLeave: handleLeave,
            onAfterLeave: handleAfterLeave,
        }, slots);
    },
});
